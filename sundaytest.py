from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from rasa.shared.core.trackers import DialogueStateTracker
from rasa.shared.core.events import UserUttered, ActionExecuted

import requests
import types

# Constants
RASA_API_ENDPOINT = 'http://localhost:5005/webhooks/rest/webhook'
TOKEN = '6309201413:AAEeTRtD1YsF_wDlPhQtdQVZjqTqVv4KOPA'
# Initialize an empty tracker dictionary to hold trackers for each user
user_trackers = {}

# Start Command Handler
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hello there! I'm michu bot and provide information on michu. What's up?")

# Message Handling
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    # Initialize or retrieve the user's tracker
    tracker = user_trackers.get(user_id)
    if not tracker:
        tracker = DialogueStateTracker.from_events(user_id, [])  # Initialize with empty events list
        user_trackers[user_id] = tracker

    # Add user message to the tracker
    user_message = UserUttered(text)
    tracker.update([user_message])

    # Predict the next action based on the current tracker state
    next_action = tracker.predict_next_action()

    # Execute the predicted action
    executed_action = ActionExecuted(next_action)
    tracker.update([executed_action])

    # Fetch the response generated by the executed action
    response = tracker.export_stories()

    # Process the response and send it to the user
    for entry in response:
        text = entry.get('text', '')
        buttons = entry.get('buttons', [])
        keyboard = [[InlineKeyboardButton(button['title'], callback_data=button['payload'])] for button in buttons]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if entry.get('image'):
            await update.message.reply_photo(entry['image'], caption=text, reply_markup=reply_markup)
        elif entry.get('video'):
            await update.message.reply_video(entry['video'], caption=text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

# Button Click Handling
async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    query = update.callback_query
    payload = query.data

    # Retrieve the user's tracker
    tracker = user_trackers.get(user_id)
    if not tracker:
        tracker = DialogueStateTracker.from_events(user_id, [])  # Initialize with empty events list
        user_trackers[user_id] = tracker

    response = requests.post(RASA_API_ENDPOINT, json=payload).json()
    for entry in response:
        text = entry.get('text', '')
        buttons = entry.get('buttons', [])
        keyboard = [[InlineKeyboardButton(button['title'], callback_data=button['payload'])] for button in buttons]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if entry.get('image'):
            await query.edit_message_media(media=types.InputMediaPhoto(media=entry['image'], caption=text), reply_markup=reply_markup)
        elif entry.get('video'):
            await query.edit_message_media(media=types.InputMediaVideo(media=entry['video'], caption=text), reply_markup=reply_markup)
        else:
            await query.edit_message_text(text, reply_markup=reply_markup)

if __name__=="__main__":
    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # Commands
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    app.add_handler(CallbackQueryHandler(handle_button_click))
    print('Polling...')
    app.run_polling(poll_interval=10)
